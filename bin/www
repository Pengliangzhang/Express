#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('react:server');
var http = require('http');
var ws = require('ws');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3300');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// create an WebSocket server
const wsServer = new ws.Server({ server })
wsServer.on('connection', (ws, request, client) => {
  console.log(`new connection! ${ws}, request: ${request.headers}, client: ${client}`)
  for (const key in request.headers) {
    if (Object.hasOwnProperty.call(request.headers, key)) {
      const element = request.headers[key];
      console.log(key, element)
    }
  }
  ws.on('message', (msg) => {
    console.log(`Received message ${msg} from user ${client} request ${request.socket}`)
    wsServer.clients.forEach((client) => {
      if (client.readyState === ws.OPEN) {
        client.send('收到啦 ！')
      }
    })
  })
  ws.send('send from ws server !')
})

/**
 * Listen on provided port, on all network interfaces.
 */
console.log(`Express server is listening on port ${port}`)
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
